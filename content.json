{"pages":[],"posts":[{"title":"小熊猫来到世界","text":"","link":"/2018/06/21/小熊猫来到世界/"},{"title":"微信小程序中绘制雷达图","text":"前言雷达图（Radar Chart），又可称为戴布拉图、蜘蛛网图（Spider Chart），是财务分析报表的一种。使用者能一目了然的了解各项指标的变动情形及其好坏趋向。本文介绍如何在微信小程序中实现雷达图绘制。 绘制背景首先我们需要绘制出雷达图后面的“蜘蛛网”。具体原理就是一层一层将多边形画出来，根据数据长度决定每一个点的位置和半径长度。 123456789101112131415161718192021var angle = Math.PI * 2 / length;for (var layer = 5; layer &gt; 0; layer--) { context.beginPath(); context.setGlobalAlpha(1); context.setStrokeStyle(&quot;#D3D3D3&quot;); if (layer % 2 != 0) { context.setFillStyle(&quot;white&quot;); } else { context.setFillStyle(&quot;#F5F5F5&quot;); } var currentRad = layer / 5 * radius; context.moveTo(center.x, center.y - currentRad); var currentAngle = -Math.PI / 2; for (var i = 0; i &lt; length; i++) { context.lineTo(center.x + currentRad * Math.cos(currentAngle), center.y + currentRad * Math.sin(currentAngle)); currentAngle += angle; } context.fill(); context.closePath(); context.stroke(); } 如代码所示，angle是根据数据长度决定的，这里为了好看，一共画五层，并且交替涂抹颜色。下图是length=6的效果： 绘制轴接下来就是将各个顶点与圆心连接起来。有了“蜘蛛网”的经验，画轴就简单多了，只需要知道最外层顶点位置然后lineTo圆心就行了。 12345678910// draw Axiscontext.beginPath();var currentAngle = -Math.PI / 2;for (var i = 0; i &lt; length; i++) { context.moveTo(center.x + radius * Math.cos(currentAngle), center.y + radius * Math.sin(currentAngle)); context.lineTo(center.x, center.y); currentAngle += angle;}context.closePath();context.stroke(); 以下是加上轴线后的效果： 绘制指标接下来是将各个维度指标名字添加到图表上。同数轴一样，首先需要确定最外层顶点的位置，然后根据位置调整文字显示的基准，将文字写上去。 12345678910111213141516// draw Indexcontext.beginPath();context.setFillStyle(&quot;#D3D3D3&quot;);context.setFontSize(14);var currentAngle = -Math.PI / 2;for (var i = 0; i &lt; length; i++) { var posX = center.x + radius * Math.cos(currentAngle); var posY = center.y + radius * Math.sin(currentAngle); if (posX &lt; center.x) context.setTextAlign(&quot;right&quot;); else context.setTextAlign(&quot;left&quot;); if (posY &gt; center.y) context.setTextBaseline(&quot;top&quot;); else context.setTextBaseline(&quot;bottom&quot;); context.fillText(that.options.xLabel[i], posX, posY); currentAngle += angle;}context.closePath(); 这里为了好看，对于文字要显示的位置小于中心点 x 坐标的靠右对齐，否则靠左对齐；对于文字位置大于中心点 y 坐标的基准设置在上方，否则在下方。以下是加上指标后的效果： 绘制数据最后，我们将数据绘制到图表上。首先，我们要确定所有数据的最大值，如果最大值大于 10，那么取 10 的倍数。然后同画“蜘蛛网”一样，将各个数据点的半径根据相对于最大值比例换算出来，然后绘制在图表上。 1234567891011121314151617181920212223242526272829303132// draw datavar MaxValue = Math.max.apply(null, that.options.data[0].value);that.options.data.forEach(function(val) { var temp = Math.max.apply(null, val.value); if (temp &gt; MaxValue) MaxValue = temp;});if (MaxValue &gt; 10) { MaxValue = Math.ceil(MaxValue / 10) * 10}that.options.data.forEach(function(val) { context.beginPath(); context.setStrokeStyle(val.color); var currentRad = radius * val.value[0] / MaxValue * step / MaxStep; context.moveTo(center.x, center.y - currentRad); var currentAngle = -Math.PI / 2; for (var i = 0; i &lt; length; i++) { currentRad = radius * val.value[i] / MaxValue * step / MaxStep; context.lineTo(center.x + currentRad * Math.cos(currentAngle), center.y + currentRad * Math.sin(currentAngle)); currentAngle += angle; } currentRad = radius * val.value[0] / MaxValue * step / MaxStep; context.lineTo(center.x, center.y - currentRad); context.stroke(); if (that.options.area) { context.setFillStyle(val.color); context.setGlobalAlpha(0.5); context.fill(); } context.closePath();});context.draw(); 以下就是添加数据后的完整效果： 添加绘制动画为了显示效果更佳，我们可以给绘制图表加上动画，具体实现如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394var angle = Math.PI * 2 / length;var step = 1;var MaxStep = that.options.animation ? 50 : 1;var animation = function() { if (step &lt;= MaxStep) { // draw background for (var layer = 5; layer &gt; 0; layer--) { context.beginPath(); context.setGlobalAlpha(1); context.setStrokeStyle(&quot;#D3D3D3&quot;); if (layer % 2 != 0) { context.setFillStyle(&quot;white&quot;); } else { context.setFillStyle(&quot;#F5F5F5&quot;); } var currentRad = layer / 5 * radius; context.moveTo(center.x, center.y - currentRad); var currentAngle = -Math.PI / 2; for (var i = 0; i &lt; length; i++) { context.lineTo(center.x + currentRad * Math.cos(currentAngle), center.y + currentRad * Math.sin(currentAngle)); currentAngle += angle; } context.fill(); context.closePath(); context.stroke(); } // draw Axis context.beginPath(); var currentAngle = -Math.PI / 2; for (var i = 0; i &lt; length; i++) { context.moveTo(center.x + radius * Math.cos(currentAngle), center.y + radius * Math.sin(currentAngle)); context.lineTo(center.x, center.y); currentAngle += angle; } context.closePath(); context.stroke(); // draw Index context.beginPath(); context.setFillStyle(&quot;#D3D3D3&quot;); context.setFontSize(14); var currentAngle = -Math.PI / 2; for (var i = 0; i &lt; length; i++) { var posX = center.x + radius * Math.cos(currentAngle); var posY = center.y + radius * Math.sin(currentAngle); if (posX &lt; center.x) context.setTextAlign(&quot;right&quot;); else context.setTextAlign(&quot;left&quot;); if (posY &gt; center.y) context.setTextBaseline(&quot;top&quot;); else context.setTextBaseline(&quot;bottom&quot;); context.fillText(that.options.xLabel[i], posX, posY); currentAngle += angle; } context.closePath(); // draw data var MaxValue = Math.max.apply(null, that.options.data[0].value); that.options.data.forEach(function(val) { var temp = Math.max.apply(null, val.value); if (temp &gt; MaxValue) MaxValue = temp; }); if (MaxValue &gt; 10) { MaxValue = Math.ceil(MaxValue / 10) * 10 } that.options.data.forEach(function(val) { context.beginPath(); context.setStrokeStyle(val.color); var currentRad = radius * val.value[0] / MaxValue * step / MaxStep; context.moveTo(center.x, center.y - currentRad); var currentAngle = -Math.PI / 2; for (var i = 0; i &lt; length; i++) { currentRad = radius * val.value[i] / MaxValue * step / MaxStep; context.lineTo(center.x + currentRad * Math.cos(currentAngle), center.y + currentRad * Math.sin(currentAngle)); currentAngle += angle; } currentRad = radius * val.value[0] / MaxValue * step / MaxStep; context.lineTo(center.x, center.y - currentRad); context.stroke(); if (that.options.area) { context.setFillStyle(val.color); context.setGlobalAlpha(0.5); context.fill(); } context.closePath(); }); context.draw(); step++; } else { clearInterval(aniName); }}var aniName = setInterval(animation, 10); 最终效果如下： 结语😊 以上就是在微信小程序中绘制雷达图的方法。如有兴趣了解更多，可以查看完整代码：https://github.com/chmini-app/CHCharts-wechat。","link":"/2018/08/29/微信小程序中绘制雷达图/"}],"tags":[{"name":"小熊猫","slug":"小熊猫","link":"/tags/小熊猫/"},{"name":"新生","slug":"新生","link":"/tags/新生/"},{"name":"小程序","slug":"小程序","link":"/tags/小程序/"},{"name":"html","slug":"html","link":"/tags/html/"},{"name":"前端","slug":"前端","link":"/tags/前端/"}],"categories":[{"name":"生活","slug":"生活","link":"/categories/生活/"},{"name":"小熊猫","slug":"生活/小熊猫","link":"/categories/生活/小熊猫/"},{"name":"工作","slug":"工作","link":"/categories/工作/"},{"name":"小程序","slug":"工作/小程序","link":"/categories/工作/小程序/"}]}